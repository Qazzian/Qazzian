#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

# Required for sourctree to get access to locally installed programs
PATH="$PATH":/usr/local/bin

# STASH=$(git stash -q --keep-index create)

function abortCommit {
	if [ -n "$STASH" ]; then
		git stash pop -q "$STASH"
	fi
	echo commit aborted
	exit 1
}

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	abortCommit
fi

# If there are whitespace errors, print the offending file names and fail.
# exec git diff-index --check --cached $against --


# Check for a DONOTCOMMIT flag. Add this to debug only code or files that should not be committed
if test $(git diff --cached $against | grep ^+ | grep DONOTCOMMIT | wc -l) != 0
then
	echo "Error attempting to commit somthing that should not be commited."
	echo "Part of your commit has been tagged with DONOTCOMMIT."
	abortCommit
fi

OLD_IFS="$IFS"
IFS=$'\n'
# check all edited javascript files
JSFILES=$(git diff --cached --name-only --relative $against | grep \.js$)
JSERRORS=()

# echo $JSFILES
for FILE in $JSFILES; do
	JSERRORS+=$(jshint "$FILE")
	# if [[ $(grep -in 'console\.log' "$FILE" | wc -l | awk '{print $1}') -ge 1 ]]; then
	# 	$JSERRORS+="Found console commands in $FILE"
	# fi
done
# echo $JSERRORS

if [[ ${#JSERRORS[@]} -ge 1 ]]; then 
  echo "Errors found in your commit"
  for STR in $JSERRORS; do
  	echo "$STR"
  done
  abortCommit
fi
IFS="$OLD_IFS"

# git stash pop -q

